// Generated by CoffeeScript 1.6.3
(function() {
  var action, crypto, currentSectionTitle, pandoc, solutions, textOf, _,
    __slice = [].slice;

  _ = require('underscore');

  pandoc = require('pandoc-filter');

  crypto = require('crypto');

  solutions = [];

  currentSectionTitle = "_no_section_seen_";

  textOf = function(body) {
    return _.chain(body).where({
      t: 'Str'
    }).pluck('c').value().join(' ');
  };

  action = function(type, value, format, meta) {
    var body, classes, hash, i, ident, kvs, level, nodes, solution, uniqueHash, _i, _len, _ref, _ref1;
    switch (type) {
      case 'Header':
        level = value[0], (_ref = value[1], ident = _ref[0], classes = _ref[1], kvs = _ref[2]), body = value[2];
        return currentSectionTitle = textOf(body);
      case 'Div':
        (_ref1 = value[0], ident = _ref1[0], classes = _ref1[1], kvs = _ref1[2]), body = value[1];
        if (classes && classes[0] === "solution") {
          hash = crypto.createHash('md5').update(JSON.stringify(body)).digest("hex");
          uniqueHash = "" + hash + "_" + solutions.length;
          solutions.push({
            key: uniqueHash,
            value: body,
            title: currentSectionTitle
          });
          if (currentSectionTitle === "_no_section_seen_") {
            console.error("Didn't find a section heading before solution encountered. Bug in solutions.coffee");
          }
          return pandoc.RawBlock("latex", "\\ref{" + uniqueHash + "}");
        } else if (classes && classes[0] === "solutions") {
          nodes = [];
          for (i = _i = 0, _len = solutions.length; _i < _len; i = ++_i) {
            solution = solutions[i];
            nodes = nodes.concat([pandoc.RawBlock("latex", "\\section{Solution " + i + " " + solution.title + "} \\label{" + solution.key + "}")].concat(__slice.call(solution.value)));
          }
          return pandoc.Div(["", [], []], nodes);
        }
    }
  };

  pandoc.stdio(action);

}).call(this);
